file folder structure

post-nest/
├── assets/
│   ├── css/
│   │   ├── admin/
│   │   └── frontend/
│   ├── js/
│   │   ├── admin/
│   │   └── frontend/
│   ├── images/
│   └── fonts/
├── src/
│   ├── admin/
│   │   ├── settings/
│   │   ├── |-- api/
│   │   ├── |-- components/
│   │   ├── |-- App.jsx/
│   │   ├── |-- index.jsx/
│   │   ├── |-- router.js/
├── includes/
│   ├── Admin/
│   │   ├── Settings.php
│   │   ├── Menu.php
│   │   └── Ajax.php
│   ├── Api/
│   │   ├── Controllers/
│   │   ├── Middleware/
│   │   └── Routes.php
│   ├── Core/
│   │   ├── Init.php
│   │   ├── Boot.php
│   │   ├── Activator.php
│   │   └── Deactivator.php
│   ├── Database/
│   │   ├── Migrations/
│   │   ├── Models/
│   │   └── QueryBuilder.php
│   ├── Frontend/
│   │   ├── Shortcodes/
│   │   └── Templates/
│   ├── Integrations/
│   │   ├── Gutenberg/
│   │   └── Elementor/
│   ├── Services/
│   │   ├── Cache/
│   │   ├── Logger/
│   │   └── Queue/
│   └── Traits/
├── languages/
├── templates/
│   ├── admin/
│   └── frontend/
├── tests/
│   ├── Unit/
│   └── Integration/
├── vendor/
├── composer.json
├── package.json
├── vite.config.js
├── phpunit.xml
├── readme.txt
├── uninstall.php
└── post-nest.php


Project context: This is a Wordpress 6.7.1 Multi-Platform Social Media Management System Wordpress Plugin. This plugin is for managing social media accounts and posts. and also it has a admin panel. and also it has a mobile app. and also it has a web app. and also it has a api.

- Most Important Note: Use latest Wordpress 6.7.1 version for this project, And all best practices should be followed, and all latest technologies should be used. and all the project should be fully functional and fully 100% responsive system for all devices. this plugin should fully developer friendly and parfect structured and fully functional and fully 100% responsive system for all devices.

# Wordpress Development Standards and Best Practices

You are an expert in WordPress, PHP, and related web development technologies.

## File Folder Location

# Use latest Wordpress 6.7.1 version for this project.

 ## Core Principles
- Write concise, technical code following SOLID principles
- Design for scalability and maintainability
- Follow PSR-12 coding standards with PHP 8.1+ features
- Implement proper error handling and logging
- Write concise, technical responses with accurate PHP examples.
- Follow WordPress coding standards and best practices.
- Use object-oriented programming when appropriate, focusing on modularity.
- Prefer iteration and modularization over duplication.
- Favor hooks (actions and filters) for extending functionality.
- Use WordPress hooks and filters for extending functionality.
- Use PHP 7.4+ features when appropriate (e.g., typed properties, arrow functions).
- Follow WordPress PHP Coding Standards.
- Utilize WordPress core functions and APIs when available.
- File structure: Follow WordPress theme and plugin directory structures and naming conventions.
- Implement proper error handling and logging:
- Use WordPress debug logging features.
- Create custom error handlers when necessary.
- Use try-catch blocks for expected exceptions.
- Use WordPress's built-in functions for data validation and sanitization.
- Implement proper nonce verification for form submissions.
- Utilize WordPress's database abstraction layer (wpdb) for database interactions.
- Use prepare() statements for secure database queries.
- Implement proper database schema changes using dbDelta() function.
- Focus on code reusability through iteration and modularization, avoiding duplication.
- Use descriptive and meaningful function, variable, and file names.


## Technology Stack
- Wordpress 6.7.1
- Vite for asset bundling
- Pest for testing
- Composer for dependency management

## Code Architecture

### Directory Structure
- Follow Wordpress's others best plugin structure
- Use lowercase with dashes for directories (e.g., app/Http/Controllers)

### Type System
- Mandatory return type declarations
- Explicit parameter type hints
- Use PHP 8.1+ features (union types, nullable types)

## Testing
- Use Pest for unit and feature tests
- Test all critical business logic
- Implement proper test coverage
- Use factories and seeders for test data

## Error Handling
- Use Wordpress's exception handler
- Create custom exceptions when needed
- Implement try-catch for expected exceptions
- Proper error logging and monitoring
- Return appropriate error responses

# WordPress Best Practices
- Use WordPress hooks (actions and filters) instead of modifying core files.
- Implement proper theme functions using functions.php.
- Use WordPress's built-in user roles and capabilities system.
- Utilize WordPress's transients API for caching.
- Implement background processing for long-running tasks using wp_cron().
- Use WordPress's built-in testing tools (WP_UnitTestCase) for unit tests.
- Implement proper internationalization and localization using WordPress i18n functions.
- Implement proper security measures (nonces, data escaping, input sanitization).
- Use wp_enqueue_script() and wp_enqueue_style() for proper asset management.
- Implement custom post types and taxonomies when appropriate.
- Use WordPress's built-in options API for storing configuration data.
- Implement proper pagination using functions like paginate_links().

# Key Conventions
- Follow WordPress's plugin API for extending functionality.
- Use WordPress's template hierarchy for theme development.
- Implement proper data sanitization and validation using WordPress functions.
- Use WordPress's template tags and conditional tags in themes.
- Implement proper database queries using $wpdb or WP_Query.
- Use WordPress's authentication and authorization functions.
- Implement proper AJAX handling using admin-ajax.php or REST API.
- Use WordPress's hook system for modular and extensible code.
- Implement proper database operations using WordPress transactional functions.
- Use WordPress's WP_Cron API for scheduling tasks.

## WordPress and WooCommerce Best Practices
- Use WordPress hooks (actions and filters) instead of modifying core files.
- Implement proper theme functions using functions.php.
- Use WordPress's built-in user roles and capabilities system.
- Utilize WordPress's transients API for caching.
- Implement background processing for long-running tasks using `wp_cron()`.
- Use WordPress's built-in testing tools (WP_UnitTestCase) for unit tests.
- Implement proper internationalization and localization using WordPress i18n functions.
- Implement proper security measures (nonces, data escaping, input sanitization).
- Use `wp_enqueue_script()` and `wp_enqueue_style()` for proper asset management.
- Implement custom post types and taxonomies when appropriate.
- Use WordPress's built-in options API for storing configuration data.
- Implement proper pagination using functions like `paginate_links()`.
- Leverage action and filter hooks provided by WooCommerce for extensibility.
- Example: `add_action('woocommerce_before_add_to_cart_form', 'your_function');`
- Adhere to WooCommerce's coding standards in addition to WordPress standards.
- Use WooCommerce's naming conventions for functions and variables.
- Use built-in WooCommerce functions instead of reinventing the wheel.
- Example: `wc_get_product()` instead of `get_post()` for retrieving products.
- Use WooCommerce's Settings API for plugin configuration pages.
- Integrate your settings seamlessly into WooCommerce's admin interface.
- Override WooCommerce templates in your plugin for custom layouts.
- Place overridden templates in `your-plugin/woocommerce/` directory.
- Use WooCommerce's CRUD classes and data stores for managing custom data.
- Extend existing data stores for custom functionality.
- Use WooCommerce session handling for storing temporary data.
- Example: `WC()->session->set('your_key', 'your_value');`
- If extending the REST API, follow WooCommerce's API structure and conventions.
- Use proper authentication and permission checks.
- Use WooCommerce's notice system for user-facing messages.
- Example: `wc_add_notice('Your message', 'error');`
- Extend WooCommerce's email system for custom notifications.
- Use `WC_Email` class for creating new email types.
- Check for WooCommerce activation and version compatibility.
- Gracefully disable functionality if requirements aren't met.
- Use WooCommerce's translation functions for text strings.
- Support RTL languages in your plugin's CSS.
- Utilize WooCommerce's logging system for debugging.
- Example: `wc_get_logger()->debug('Your debug message', array('source' => 'your-plugin'));`